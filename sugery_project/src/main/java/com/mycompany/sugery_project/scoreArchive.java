/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sugery_project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.TableColumn;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.lang.Object;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Observer;



/**
 *
 * @author mikowhy
 */
public class scoreArchive extends javax.swing.JFrame {

    //TODO Event Deletion
    /**
     * Creates new form scoreArchive
     */
    private User user;
    private entryTable dataTable = new entryTable();
    /**
     *
     * @param usr
     * @param model
     */
    public scoreArchive(User usr) {
        this.user = usr; 
        initComponents();
    }

     // @Override
    public boolean isCellEditable(int row, int column) {     
                return false;               
        };      
     
     
    void displayScores() throws ClassNotFoundException, SQLException, ParseException{
        //TODO make private
        //TODO display buttons so the user can modify scores
        //TODO score summary
        //TODO: remake Scores into a hashTable?
        // find a solution to not enter the same entry twice
        //  idea: look at the previous entry & if they're the same, ask if you're sure
        // q: how to quickly retrieve that entry - where from

        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0); // no initial rows
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(180);
        DateFormat dateFormat = new SimpleDateFormat("yyy-mm-dd HH:mm:ss");
        String sql = "SELECT * FROM Scores WHERE `username` = " + "'" + 
                this.user.getName() + "' ORDER BY date ASC;"; // DESC LIMIT  1
        ResultSet sq =  dataTable.selectEntries(sql); // st.executeQuery(sql);
        while(sq.next()){ //TODO: check if entry already in the table
            Object[] score = new Object[]{sq.getString("date"), sq.getString("score")}; 
            tableModel.insertRow(0, new Object[]{sq.getString("date"), sq.getString("score")});
            System.out.println("date and score : " + sq.getInt("score") + ", " + dateFormat.parse(sq.getString("date")));
            //this.user.getUsArr().add(new Score(sq.getInt("score"), dateFormat.parse(sq.getString("date"))));
        }
        displayAnalysis(); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        remSc = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        commArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Close");
        jButton1.setToolTipText("");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Score"
            }
        ));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        remSc.setText("Remove Score");
        remSc.setToolTipText("");
        remSc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remScActionPerformed(evt);
            }
        });

        commArea.setEditable(false);
        commArea.setBackground(new java.awt.Color(238, 238, 238));
        commArea.setColumns(20);
        commArea.setRows(5);
        jScrollPane2.setViewportView(commArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remSc, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(remSc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseEntered

    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
           this.setVisible(false);

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void remScActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remScActionPerformed
        //TODO need an observable
        if(!jTable1.getSelectionModel().isSelectionEmpty()){
            try {
                dbRemove(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString(),  
                        jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1).toString());
                ((DefaultTableModel)jTable1.getModel()).removeRow(jTable1.getSelectedRow());
       
                
                displayAnalysis();
                //TODO: remove from usArr; selection problem
                // use this: jTable1.getSelectedRow();
                // need to do the same with adding to the array
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(scoreArchive.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(scoreArchive.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //commArea.setText("Select a row first, then click 'Delete'");
            JOptionPane.showMessageDialog(new JFrame("No Selection"), "Select a row first, then click 'Delete'");
        }
    }//GEN-LAST:event_remScActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == 8){  // disable editing
            System.out.println("backspace");
        }else if (evt.getKeyCode() == 9){
            //TODO disable switching to next row
            remSc.requestFocus();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void dbRemove(String date, String score) throws ClassNotFoundException, SQLException{
        Class.forName("com.mysql.cj.jdbc.Driver"); // is it necessary?
        String url = "jdbc:mysql://localhost/LOG?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"; 
        Connection conn = DriverManager.getConnection(url,"root","Pass123!!!"); 
        Statement st = conn.createStatement();
        // up to here everything the same?
        String sql = "DELETE FROM Scores WHERE `username` = '" + this.user.getName()
                + "' AND `score` = " + score + " AND `date` = '" + date  +  "';";
        System.out.println("sql : " + sql);
        this.user.getHM().remove(date);
    }

    private void displayAnalysis(){
        //TODO sc will be empty with each execution - needs to be obtained from the server
        
        // so then just with each operation call displayAnalysis I guess?
        // can do stuff like morningCount, eveningCount etc
        getAllScores(); // 
        int sum = 0;
        int counter = 0;         
        
        for(Entry<String, Integer> e : this.user.getHM().entrySet()){
            sum+=e.getValue();
            counter++;
            
        }
        
        commArea.setText(null);
        commArea.append(counter + " scores registered. \n");
        commArea.append("Average Value: " + sum / counter);
        
    }
    
    private void getAllScores(){
        ArrayList<Score> ans; 
        String username;
        int score;
        String dt; 
            try{
            String sql = "SELECT username, score, date FROM Scores";
            ResultSet rs = dataTable.selectEntries(sql); //st.executeQuery(sql);
            while(rs.next()){ // TODO shouldn't it be select from where?
                username = rs.getString("username");
                score = rs.getInt("score");
                dt = rs.getString("date"); // convert to a different format?  // below check : && us_pass.equals(String.copyValueOf(password))){
                if(username.equals(this.user.getName())){                    //TODO should check if the score isn't already in the usArr
                    if(!this.user.getHM().containsKey(dt)){ // checks the date
                        this.user.HM_Insert(dt, score);
                        }
                    }
                }
            }catch(Exception e){
                System.out.println("Exception: " + e);
        }
        
    }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea commArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton remSc;
    // End of variables declaration//GEN-END:variables



}
