/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sugery_project;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.Stage;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mikowhy
 */
public class mainFrame extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form mainFrame
     */
    
    User user;
    entryTable table = new entryTable();
    private scoreOperations scOp= new scoreOperations();
    // where to move this?
//    scoreArchive sa = new scoreArchive(this.user); // where should this be? it's just a new window
// TODO usArr seems kinda tedious

    public mainFrame(User usr) {
        initComponents();
        this.user = usr;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        ageField = new javax.swing.JTextField();
        monthAvg = new javax.swing.JTextField();
        addScoreButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        allScBut = new javax.swing.JButton();
        scAnalyze = new javax.swing.JButton();
        scoreField = new javax.swing.JTextField();
        goalField = new javax.swing.JTextField();
        logoutKey = new javax.swing.JButton();
        entryText = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        weekAvg = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        feedbackField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(238, 138, 238));
        setBounds(new java.awt.Rectangle(100, 23, 0, 0));
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(750, 520));
        setResizable(false);
        setSize(new java.awt.Dimension(740, 550));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1061, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 597, 1061, 290);

        ageField.setEditable(false);
        ageField.setBackground(new java.awt.Color(179, 177, 178));
        ageField.setForeground(new java.awt.Color(255, 255, 255));
        ageField.setText("age: ");
        ageField.setToolTipText("");
        ageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageFieldActionPerformed(evt);
            }
        });
        getContentPane().add(ageField);
        ageField.setBounds(560, 30, 74, 30);

        monthAvg.setEditable(false);
        monthAvg.setBackground(new java.awt.Color(179, 177, 178));
        monthAvg.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        monthAvg.setForeground(new java.awt.Color(51, 51, 51));
        monthAvg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        monthAvg.setText("n/a");
        monthAvg.setToolTipText("");
        monthAvg.setBorder(null);
        monthAvg.setFocusable(false);
        monthAvg.setPreferredSize(new java.awt.Dimension(160, 60));
        monthAvg.setSize(new java.awt.Dimension(160, 60));
        monthAvg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthAvgActionPerformed(evt);
            }
        });
        monthAvg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                monthAvgPropertyChange(evt);
            }
        });
        getContentPane().add(monthAvg);
        monthAvg.setBounds(280, 280, 160, 60);

        addScoreButton.setText("Add Score");
        addScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addScoreButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addScoreButton);
        addScoreButton.setBounds(280, 400, 145, 32);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(179, 177, 178));
        jTextField1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(51, 51, 0));
        jTextField1.setText("Last Score Registered At:");
        jTextField1.setToolTipText("");
        jTextField1.setBorder(null);
        jTextField1.setFocusable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1);
        jTextField1.setBounds(320, 360, 320, 30);

        allScBut.setBackground(new java.awt.Color(102, 102, 102));
        allScBut.setText("All Scores");
        allScBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allScButMouseClicked(evt);
            }
        });
        allScBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allScButActionPerformed(evt);
            }
        });
        allScBut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                allScButKeyPressed(evt);
            }
        });
        getContentPane().add(allScBut);
        allScBut.setBounds(460, 400, 121, 32);

        scAnalyze.setText("Score Analysis");
        scAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scAnalyzeActionPerformed(evt);
            }
        });
        getContentPane().add(scAnalyze);
        scAnalyze.setBounds(610, 400, 121, 32);

        scoreField.setEditable(false);
        scoreField.setBackground(new java.awt.Color(179, 177, 178));
        scoreField.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        scoreField.setForeground(new java.awt.Color(0, 102, 51));
        scoreField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        scoreField.setText("n/a");
        scoreField.setToolTipText("");
        scoreField.setBorder(null);
        scoreField.setFocusable(false);
        scoreField.setPreferredSize(new java.awt.Dimension(90, 60));
        scoreField.setSize(new java.awt.Dimension(160, 60));
        scoreField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                scoreFieldPropertyChange(evt);
            }
        });
        getContentPane().add(scoreField);
        scoreField.setBounds(280, 140, 160, 60);

        goalField.setEditable(false);
        goalField.setBackground(new java.awt.Color(238, 238, 238));
        goalField.setText("goal: ");
        goalField.setToolTipText("");
        getContentPane().add(goalField);
        goalField.setBounds(560, 70, 82, 24);

        logoutKey.setText("Logout");
        logoutKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutKeyActionPerformed(evt);
            }
        });
        getContentPane().add(logoutKey);
        logoutKey.setBounds(276, 450, 460, 32);

        entryText.setEditable(false);
        entryText.setBackground(new java.awt.Color(179, 177, 178));
        entryText.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        entryText.setForeground(new java.awt.Color(51, 51, 51));
        entryText.setAlignmentX(1.0F);
        entryText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(entryText);
        entryText.setBounds(30, 30, 430, 70);

        jTextField2.setBackground(new java.awt.Color(179, 177, 178));
        jTextField2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(51, 51, 0));
        jTextField2.setText("7 Day Average");
        jTextField2.setBorder(null);
        jTextField2.setFocusable(false);
        getContentPane().add(jTextField2);
        jTextField2.setBounds(440, 220, 290, 30);

        weekAvg.setEditable(false);
        weekAvg.setBackground(new java.awt.Color(179, 177, 178));
        weekAvg.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        weekAvg.setForeground(new java.awt.Color(204, 0, 51));
        weekAvg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weekAvg.setText("n/a");
        weekAvg.setToolTipText("");
        weekAvg.setBorder(null);
        weekAvg.setFocusable(false);
        weekAvg.setSize(new java.awt.Dimension(160, 60));
        weekAvg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                weekAvgPropertyChange(evt);
            }
        });
        getContentPane().add(weekAvg);
        weekAvg.setBounds(280, 210, 160, 60);

        jTextField3.setBackground(new java.awt.Color(179, 177, 178));
        jTextField3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(51, 51, 0));
        jTextField3.setText("30 Day Average");
        jTextField3.setBorder(null);
        jTextField3.setFocusable(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField3);
        jTextField3.setBounds(440, 290, 290, 30);

        jTextField4.setBackground(new java.awt.Color(179, 177, 178));
        jTextField4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(51, 51, 0));
        jTextField4.setText("Last Update");
        jTextField4.setBorder(null);
        jTextField4.setFocusable(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField4);
        jTextField4.setBounds(440, 150, 103, 30);

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/green-potted-plant-on-white-ceramic-vase-1166644.jpg"))); // NOI18N
        jLabel4.setMaximumSize(new java.awt.Dimension(750, 580));
        jLabel4.setMinimumSize(new java.awt.Dimension(750, 580));
        jLabel4.setName(""); // NOI18N
        jLabel4.setPreferredSize(new java.awt.Dimension(750, 580));
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, -40, 760, 580);

        feedbackField.setEditable(false);
        feedbackField.setText("No score yet :(");
        feedbackField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackFieldActionPerformed(evt);
            }
        });
        getContentPane().add(feedbackField);
        feedbackField.setBounds(240, 320, 132, 47);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 102, 0), 10));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(270, 100, 130, 260);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void feedbackFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_feedbackFieldActionPerformed

    private void addScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addScoreButtonActionPerformed
        // show screen for inputting the data
        scoreScreen sc = new scoreScreen(user, 0); //TODO not sure
        sc.setVisible(true);
        
        if(!sc.isVisible()){
            //scoreField.setText(Integer.toString(sc.user.getUsArr().get(0).result));
            scoreField.setText(this.user.getHM().lastKey());
        }
      
        
    }//GEN-LAST:event_addScoreButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if(scoreField.getText().equals("n/a")){
            scoreField.setText(null);
        }
    }//GEN-LAST:event_formMouseClicked

    private void allScButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allScButActionPerformed
        // TODO add your handling code here:
        scoreArchive sa = new scoreArchive(this.user); // where should this be? it's just a new window
        sa.setVisible(true);
        try {
            sa.displayScores();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_allScButActionPerformed

    private void allScButMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allScButMouseClicked
        // TODO add your handling code here:
       /*
        scoreArchive sa = new scoreArchive(this.user); // where should this be? it's just a new window
        sa.setVisible(true);
        try {
            sa.displayScores();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_allScButMouseClicked

    private void scoreFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_scoreFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_scoreFieldPropertyChange

    private void allScButKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allScButKeyPressed
        /*
        if(evt.getKeyCode() == 13){ // not working?
                scoreArchive sa = new scoreArchive(this.user); // where should this be? it's just a new window
            sa.setVisible(true);
            try {
                sa.displayScores();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } */
        // TODO add your handling code here:
    }//GEN-LAST:event_allScButKeyPressed

    private void scAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scAnalyzeActionPerformed
        scoreAnalizer scAn = new scoreAnalizer(this.user); // changed score to scores
        System.out.println(this.user.getUsArr());
        scAn.createAndShowGui();
        
        
        
        
        
    }//GEN-LAST:event_scAnalyzeActionPerformed

    private void logoutKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutKeyActionPerformed
            this.setVisible(false);
            loginScreen ls = new loginScreen();
            ls.setVisible(true);
            // set loginframe visible
            
    }//GEN-LAST:event_logoutKeyActionPerformed

    private void monthAvgPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_monthAvgPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_monthAvgPropertyChange

    private void weekAvgPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_weekAvgPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_weekAvgPropertyChange

    private void ageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageFieldActionPerformed

    private void monthAvgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthAvgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthAvgActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    /**
     * @param args the command line arguments
     */


    public void displayUserData(ArrayList<User> al, int idx) throws ClassNotFoundException, SQLException, ParseException{ //TODO change parameters
        //TODO display different stuff based on what time it is
        // when the program is closed (spot that moment)
        this.user.addObserver(this); // TODO: what's this?
        entryText.setText("Welcome, " + this.user.getName() + ".\n"); // why can i access .first?
        ageField.setText("age : " + this.user.getAge());
        goalField.setText("goal : " + this.user.getGoal()); //not working?
        
           if(!this.user.getHM().isEmpty()){
                scoreField.setText(this.user.getHM().lastEntry().getValue().toString()); // make sure it's still the same score
                jTextField1.setText(jTextField1.getText() + this.user.getHM().lastEntry().getKey().toString());
                weekAvg.setText(this.user.displayAnalysis("week").get(1));
                monthAvg.setText(this.user.displayAnalysis("month").get(1));
                evaluateScore(Integer.parseInt(this.user.getHM().lastEntry().getValue().toString()),
                        this.user.getGoal());
        }


        }
   // }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addScoreButton;
    private javax.swing.JTextField ageField;
    private javax.swing.JButton allScBut;
    private javax.swing.JTextField entryText;
    private javax.swing.JTextField feedbackField;
    private javax.swing.JTextField goalField;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton logoutKey;
    private javax.swing.JTextField monthAvg;
    private javax.swing.JButton scAnalyze;
    private javax.swing.JTextField scoreField;
    private javax.swing.JTextField weekAvg;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) { //TODO fix (not sure if this or other method)
        if(o == this.user){ // checking if it's one from many im assuming
            int recentScore = this.user.getHM().lastEntry().getValue(); 
            scoreField.setText(this.user.getHM().lastEntry().getValue().toString());
            jTextField1.setText("Last Score Registered At: "+ this.user.getHM().lastKey()); // or last entry
            try {
                weekAvg.setText(this.user.displayAnalysis("week").get(1));
                monthAvg.setText(this.user.displayAnalysis("month").get(1));
                //monthAvg.setText(this.user.displayAnalysis("month").get(1));
            } catch (ParseException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            evaluateScore(recentScore, this.user.getGoal());
            //TODO weekly score upadte as well
// weeklyScoreUpdate(); 
        }else{
        
        //TODO not done yet bc still causes an exception
           
        
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    
    private void weeklyScoreUpdate() throws SQLException{ // TODO idk what's that
        ArrayList<String> displayEntries; 
        LocalDate date = LocalDate.now();
        int sum = 0, count = 0; 
        String statement = "SELECT * FROM UserData WHERE username = " + this.user.getName()
                + "AND date > " + date.minusDays(7);
        ResultSet rs = table.selectEntries(statement);
        rs.next(); // TODO check if necessary
       // displayEntries = scOp.displayAnalysis();
        // sprawdz jak to sie robi w screenArchive z calosca
        
        
        
        
        
    }
    public void evaluateScore(int score, int goal){
        // TODO: display the score differently based on how much off from the goal
        //TODO check if it's working properly
         goal = this.user.getGoal();
         score = this.user.getHM().lastEntry().getValue(); 
        
            //TODO change font instead of text
        
        if(score <= goal){
            feedbackField.setText("Great Job!!!");
            feedbackField.setBackground(Color.GREEN);
        }else if(score > goal * 1.5){
            feedbackField.setText("Your sugar level is very high.");
            feedbackField.setBackground(Color.RED);
        }else if(score > goal * 1.3){
            feedbackField.setText("High score - but not in a good way :(");
            feedbackField.setBackground(Color.BLUE);
        }else if(score > goal * 1.15){
            feedbackField.setText("Not bad - but a little too high.");
            feedbackField.setBackground(Color.CYAN);
        }else if(score > goal * 1){
            feedbackField.setText("Nice work!");
            feedbackField.setBackground(Color.MAGENTA);
        }
        else{
  
        }
    }
    private ResultSet getResults(int mode) throws ClassNotFoundException, SQLException{ //TODO change to ResultSet
        ResultSet rs = null;
        Class.forName("com.mysql.cj.jdbc.Driver"); // is it necessary?
        String url = "jdbc:mysql://localhost/LOG?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"; 
        Connection conn = DriverManager.getConnection(url,"root","Pass123!!!"); 
        try{
            Statement st = conn.createStatement();
            String sql = "SELECT * FROM Scores"; 
            if(mode == 2){
                sql = "SELECT * FROM Scores WHERE `username` = " + "'" + this.user.getName() + "' ORDER BY date DESC LIMIT  1;";
            }
                    rs =  st.executeQuery(sql);
        }catch(Exception e){
            //TODO resize the text
            scoreField.setText("Connectivity error");
        }

        return rs; 
    
    
    }
    
}
